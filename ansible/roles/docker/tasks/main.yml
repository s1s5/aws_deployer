- name: remove docker.io
  apt: name={{ item }} state=absent
  with_items:
    - docker.io
    - docker
    - docker-engine

- name: install prerequisite packages
  apt: name={{ item }} update_cache=yes  state=installed
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common

- name: add APT signing key for docker-ce
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg state=present

- name: add docker-ce repository
  apt_repository: repo="deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release|lower }} stable" state=present

- name: install docker
  apt: name={{ item }} update_cache=yes  state=installed
  with_items:
    - docker-ce
    - lvm2

- name: copy daemon.json
  template: >
    src=daemon.json.j2
    dest=/etc/docker/daemon.json
    owner=root
    mode=0600
  notify:
    - restart docker

- name: copy daemon.json
  template: >
    src=default_docker.j2
    dest=/etc/default/docker
    owner=root
    mode=0600
  notify:
    - restart docker

# - name: set INIT status and start plugin
#   service: name=docker state=started enabled=yes

# - name: download netshare plugin
#   get_url: url="https://github.com/ContainX/docker-volume-netshare/releases/download/v0.20/docker-volume-netshare_0.20_amd64.deb" dest=/tmp

# - name: Install a .deb package
#   apt:
#     deb: /tmp/docker-volume-netshare_0.20_amd64.deb
#   notify:
#     - restart docker

# - name: set INIT status and start plugin
#   service: name=docker-volume-netshare state=started enabled=yes

- name: check audit rules
  lineinfile: regexp={{ item.re }} line={{ item.line }} dest=/etc/audit/audit.rules state=present
  with_items:
    - { re: "^-w /usr/bin/docker -p wa -k docker", line: "-w /usr/bin/docker -p wa -k docker" }
    - { re: "^-w /var/lib/docker -p wa -k docker", line: "-w /var/lib/docker -p wa -k docker" }
    - { re: "^-w /etc/docker -p wa -k docker", line: "-w /etc/docker -p wa -k docker" }
    - { re: "^-w /lib/systemd/system/docker.service -p wa -k docker", line: "-w /lib/systemd/system/docker.service -p wa -k docker" }
    - { re: "^-w /lib/systemd/system/docker.socket -p wa -k docker", line: "-w /lib/systemd/system/docker.socket -p wa -k docker" }
    - { re: "^-w /etc/default/docker -p wa -k docker", line: "-w /etc/default/docker -p wa -k docker" }
    - { re: "^-w /etc/docker/daemon.json -p wa -k docker", line: "-w /etc/docker/daemon.json -p wa -k docker" }

- name: check audit rules
  lineinfile: regexp={{ item.re }} line={{ item.line }} dest=/etc/profile insertafter=EOF state=present
  with_items:
    - { re: "^export DOCKER_CONTENT_TRUST=1", line: "export DOCKER_CONTENT_TRUST=1" }

# - name: copy check_docker.py
#   copy:
#     src: check_docker.py
#     dest: /opt/stat_tools/check_docker.py
#     owner: td-agent
#     group: td-agent
#     mode: 0644

# - name: copy fluentd conf
#   copy:
#     src:  fluentd_30-docker.conf
#     dest: /etc/td-agent/conf.d/30-docker.conf
#     owner: td-agent
#     group: td-agent
#     mode: 0644
#   notify:
#     - restart td-agent

- name: copy logrotate conf
  copy:
    src:  logrotate_docker-container
    dest: /etc/logrotate.d/docker-container
    owner: root
    group: root
    mode: 0644

- name: "remove docker containers"
  cron:
    name: "remove docker containers"
    minute: "11"
    hour: "3"
    job: "docker rm `docker ps -aq`"

- name: "remove docker images"
  cron:
    name: "remove docker images"
    minute: "33"
    hour: "5"
    job: "docker rmi `docker images -aq`"

# # from https://github.com/spk83/ansible-docker-provision-thinpool
# - name: check if the device has partition layout
#   become: true
#   become_user: root
#   command: sfdisk -d {{docker_provision_thinpool_device_name}}
#   register: partition_layout

# - name: run tasks to provision thinpool
# #  when: partition_layout.stdout == ""
#   include: provision.yml
